import random
import time
import pygame

pygame.init()

nodes = []

weights = [0.803677195734982, 0.9016730102569019, 1.35219134221985, 0.7191673810443728, 0.7162590874373579, 0.11291866807613701, 0.4090748826108054, 1.3959571566189708, -0.15669601278142917, 0.1832095360782579, 0.017175545859941247, -0.4914248300387183, 0.2659104422076876, 0.6908924141575005, 0.8476512653787116, 0.2779342546637949, -0.056964349893035955, 0.7753556924702715, -0.057545346057598694, -0.034099711778181156, 1.7994938224634363, 0.14853079635442157, -0.018890737807915232, -0.18113347501915397, -0.0718844127084182, 1.0207461142942982, 0.390465206309217, 0.19271719145591687, -0.15797996408363532, -0.013494959991432786, 1.03529899871047, 1.0769035787260337, 2.0067673695889696, 0.6159765010325405, 1.2815676615013967, 0.6863432283322304, 0.6310285131652672, -0.4395434162392049, 1.0065323653192086, 0.6102591781480101, 0.09283256226040837, 1.4203194006446431, 0.030271620573617885, 0.17358733519356045, 1.2543695307366827, -0.10100258211279027, 0.47939508293486377, 0.5830175427637596, 0.8329416192847802, -0.5257277486170981, 0.8381287689255114, -0.15841164941639982, 0.9859834453151999, 1.0749203834151517, 0.7695367672550064, -0.5064501369014973, 1.0890586273445604, 1.284937492309861, -0.875865924170303, 0.7867186743347183, 0.7072150707597012, 0.3529770276330176, -0.29493206959664486, 0.8079244234227558, 0.8464958250542952, 0.7501592339303427, 0.7633858615937246, 1.276115374631907, 1.511133853525633, 1.32114549407889, 0.4737637123855106, 1.2031671715808518, 1.2640097761219165, 1.36335226428328, 0.13881080022107192, -0.5826182139554429, 0.4051167222265719, 0.33064900321653296, 0.3718079114289202, 0.030774547572921748, 0.6008385463233759, 2.4828978651074616, 0.25265121407043384, 0.14331677588404368, 0.8345750406702752, 0.2635543462041456, 0.5983576146230211, -1.2854907663279276, 0.500299275395139, 0.4913400782169531, 0.12716937783123694, 0.6424497317613522, 0.27885993390076325, -0.6585014241601694, 0.26597961115585433, 0.38328039071571773, 0.11639477511305965, 0.47491464118441934, 0.32020099322973045, 3.009518385433487, 0.13943125757917574, -0.02779671111806843, 0.34211989891858974, 0.8605688543312695, 1.0418163223528456, 0.9194687399833837, 0.8395671860515102, 0.9736350599278066, 1.0708760603324197, 0.21183765775475788, -0.7363307211680936, 0.3714930384097634, 0.5000194252864417, -1.0367631870890888, 1.0481135533069028, 0.11312910066614947, -0.023952301616415976, 0.10797402298463361, 0.17730888185553292, -1.2817953546381902, 0.5590098849159468, -0.024294919609514246, 1.4269856742172982, 0.5263165183604956, 0.36316216687699227, 2.0278479013032347, 0.5240747290339414, 0.9206924975716605, 0.9365974440937168, 0.4252595696080131, -0.15905413063588275, 0.9970816032204164, 0.5983589785776864, 0.30941002184921135, 1.4265568613286417, -0.14190811073604628, -0.007066388592182462, 1.084479009276042, 1.5260065320541822, 1.067119703573025, 0.8153852466766456, 0.8729694033886174, 1.1235876663922688, 0.9800720467640599, 1.0765812293854433, 1.0768387710875402, 1.1608190852384714, 0.3701367693717219, 0.6824141440074429, 0.417824529848005, 0.8710709130231652, 0.5843095990476161, 1.3056318025770612, 0.31477640112321603, 1.3167619354690125, 1.238060546805192, 0.7659684481846019, 1.0945317233163643, 0.919712636500253, 1.7516691554925852, 0.8643698148048231, 1.0367006129741831, 0.7616899773783217, 1.1026039887242003, 1.0558899404388253, 0.9132872093776646, 1.1428590420301614, 0.5864040343092685, 0.41094621255828634, 0.2902561925762048, 0.5424967052039004, -0.050827817498905845, -0.02136019802426652, -0.12039564319994654, 0.6605507345507451, 1.100575457637018, 0.8623325188868118, 0.5241818277785932, 0.7391298258196368, 0.6451209694008291]



#[0.7962194427262359, 0.8679136356598196, 1.345672324836952, 0.7107690480459323, 0.7189847086695862, 0.09622256967096318, 0.42791886820574265, 1.3031794297969592, -0.3689764222778109, -0.015442874224206926, -0.07920273673900985, -0.5280142372452709, 0.26634206883452877, 0.0032430609155442514, 0.9178467229570844, 0.27951436956422665, -0.1095795548247234, 0.7691664842621744, -0.05031832331869129, -0.0394776140478494, 1.7979141229402131, 0.15856123770819713, -0.00507558315255628, -0.16340426147575965, -0.13016428241044714, 1.1302766810555767, 0.34627340327790507, 0.19997919675180484, -0.14752148848777072, -0.07664769957986546, 1.1436526589066236, 1.0671646637881214, 2.085862676233181, 0.7958645853459808, 1.1764094455209346, 0.7694987035976301, 0.6216995479379452, -0.47481916806923546, 1.0965130062663526, 0.6085135489805698, 0.1294976219828699, 1.3261138308718043, 0.025436346945815484, 0.16156872118296942, 1.3422329659291012, -0.12733273521912192, 0.5491375978619222, 0.5671193258513063, 0.8457940283299448, -0.5229823728114003, 0.8089812643121039, -0.1594870765579088, 0.9752253633852064, 1.0917765985068948, 0.7164631173246411, -0.5991989957415279, 1.084055978859935, 1.2174296697698737, -0.6803578280586566, 0.7087640109568999, 0.7198969783629129, 0.45427395426052347, -0.25444642860661537, 0.7307941507419792, 0.5262033898050019, 0.819429556952168, 0.6301039521548017, 1.1770499763897888, 1.5499290650089628, 1.3647090236245787, 0.5586087823279018, 1.2082936422181374, 1.2953320405889115, 1.3500282047571817, 0.056912961871348006, -0.2638961363604728, 0.2185039117991345, 0.37555002835887186, 0.2851073126949273, 0.06540392283032595, 0.5829592845344722, 2.2360759283395097, 0.2449155642489743, 0.13803978705747413, 0.854719524215686, 0.13471279469880237, 0.5591455507283938, -1.1481894253026923, 0.3539200393378668, 0.4938995045494968, 0.21185921704676913, 0.169414792682728, 0.2914889868413274, -0.6947977228082256, 0.1906634263868198, 0.40041538107418967, 0.1188822883544649, 0.6417426120605517, 0.32147701341618506, 2.4826227875332108, 0.1272732883723633, -0.012603704495031794, 0.3663733928805913, 0.8473542656174747, 1.063344612273713, 0.8654906398679084, 0.8112849873414726, 1.0009288895070596, 1.0590307262275316, 0.25071605042332556, -0.7203910088062605, 0.36565539965631205, 0.5261612162869103, -0.9272305977134786, 1.0303954371541884, 0.10278691223570148, -0.008066049596298216, 0.10585113498922742, 0.16435953578179463, -1.2154315785410013, 0.692649654112871, -0.059815484738408115, 1.3253223903373705, 0.5273584584532695, 0.4285343798307263, 2.1324643575516293, 0.6205121810506705, 0.9588653412639484, 0.9159110256044164, 0.19671139332996326, -0.11127627040439694, 1.1631364458448505, 0.60523898481079, 0.3343835275787304, 1.2816630449419317, -0.13188165037572758, -0.0026406245936370382, 1.1278221961639927, 1.4786204587157044, 1.0094078912430473, 0.8072776374696843, 0.9407892660083346, 1.2091939679322443, 0.7939001728000052, 1.007002448538206, 1.0406663892138723, 1.1665661199242818, 0.41911491230277814, 0.7300162099388413, 0.5074402143773588, 0.785236412526618, 0.658677455126833, 1.2805641330254538, 0.281512927752482, 1.2162029938930778, 1.1768194480466572, 0.8338955386950271, 0.903834475129456, 0.9737794694045684, 1.7734539769575541, 0.840631480326589, 1.030452793529139, 0.6779911409757606, 1.1643529480607535, 1.1424731183150767, 0.7861559555608123, 1.1175347992357827, 0.5812378350183479, 0.4712619346187793, 0.2911856460307302, 0.45970440471282853, -0.04885593600332515, -0.02017399113397975, -0.11131071739237292, 0.7107231503166969, 1.0892071618205381, 0.9110701723766078, 0.6091903101522917, 0.7762570844429182, 0.6603167273420392]


itC = 0
species = 0

# 6x6 neural network with a bias node for each layer. Rectified linear function will be used.


len_weights = 6*6*5

len_nodes = 6*6
for i in range(0,len_nodes):
    nodes.append(0)



def sigmoid(x):
    if(x > 0):
        return x
    else:
        return 0


def ff(x_in, y_in, weights_in, nodes_in):
    nodes_in[0] = 1
    nodes_in[1] = x_in
    nodes_in[2] = y_in
    nodes_in[3] = 1
    nodes_in[4] = 1
    nodes_in[5] = 1

    for i in range(6,len_nodes):
        if(i % 6 == 0):
            nodes_in[i] = 1
        else:
            nodes_in[i] = 0
            for j in range(0, 6):
                # Add and weight all nodes in previous layer
                node_index = j + (i - i % 6) - 6
                weight_index = (i - 7) * 6 + j
                #print("node " + str(node_index) + " connected by " + str(weight_index) + " to " + str(i))
                nodes_in[i] += nodes_in[node_index] * weights_in[weight_index]
            nodes_in[i] = sigmoid(nodes[i])
    return nodes_in[-1]

#print(ff(1, 1, weights, nodes))

def extract_numbers_from_file(file_path):
    numbers = []
    try:
        with open(file_path, 'r') as file:
            for i, line in enumerate(file):
                if i >= 1000:  # Process only the first 1000 lines
                    break

                parts = line.split()  # Split the line into parts
                
                # Extract and store the first three numbers
                try:
                    first_three_numbers = [float(parts[j]) for j in range(3)]
                    numbers.append(first_three_numbers)
                except (IndexError, ValueError):
                    print(f"Line {i + 1} is malformed or doesn't contain enough numbers.")

    except FileNotFoundError:
        print(f"File not found: {file_path}")

    return numbers

# Example usage
file_path = 'train_data.txt'  # Replace with your file path
extracted_numbers = extract_numbers_from_file(file_path)
#print(extracted_numbers)


def loss(nodes_in, weights_in):
    sum = 0
    for i in range(0, 100):
        x = extracted_numbers[i][0]
        y = extracted_numbers[i][1]
        a = extracted_numbers[i][2]
        a_guess = ff(x, y, weights_in, nodes_in)
        loss = ((a - a_guess) ** 2) / 100
        sum += loss

    return sum

#print(loss(nodes, weights))


# Window dimensions
maxW = 800
maxH = 800
window = pygame.display.set_mode((maxW, maxH))

# Plotting dimensions
pCX = 200
pCY = 200

pSX = maxW / pCX
pSY = maxH / pCY

minX = -2
minY = -2
maxX = 2
maxY = 2

def is_in_mandelbrot(c, max_iter=100):
    z = 0
    for i in range(max_iter):
        z = z * z + c
        if abs(z) > 2:
            return False
    return True

window.fill((100, 100, 100))

for y in range(pCY):
    for x in range(pCX):
        # Convert pixel coordinate to complex number
        xSet = x / pCX * (maxX - minX) + minX
        ySet = y / pCY * (maxY - minY) + minY
        c = ff(xSet, ySet, weights, nodes)
        print(c)

        # Check if the complex number is in the Mandelbrot set
        if(c > 0.0 and c < 1):
            color = (255 * c, 255 * c, 255 * c)  # White for points in the set
        elif(c <= 0):
            color = (0, 0, 0)       # Black for points not in the set
        else:
            color = (255, 255, 255)

        # Draw the point
        pygame.draw.rect(window, color, (x * pSX, y * pSY, pSX, pSY))

# Update the display
pygame.display.flip()

# Keep the window open until it is closed by the user
running = True
while running:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False

pygame.quit()

