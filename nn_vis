import random
import time

nodes = []

weights = [0.8039772998865873, 0.5454520535774424, 1.0509933982451227, 0.641053986359235, 0.605480648716368, 0.12999843559135893, 0.43043607270004547, 0.5485849271752073, 0.016151941076553645, 0.14170465180127512, 0.1037507095222167, -0.34922091942615985, 0.3414347444738309, 0.2934083673512366, 0.02760003844221243, 0.3154430914081846, 0.03296623397403285, 0.6593707746137156, 0.0681129710244841, 0.5963634604351661, 1.2478694895454219, 0.16792601877021618, 0.03226350293966287, 0.059025566658124855, -0.12324115131779118, 0.6115855275659922, 0.44002316095889205, 0.29375414377296216, -0.03863290976290105, -0.005376812106688836, 0.9896947620554458, 0.7103708341011257, 1.3584915270791427, 0.8853169919520878, 1.241495538482078, 0.9330036128232909, 0.5914688584627426, -0.6168620543496224, 0.14456810553210983, 0.5167635657506234, 0.06619269515054776, 0.6760299216801048, 0.4518236877564158, 0.22656272719031717, 0.3536648133356598, 0.2545915278641322, 0.40467296994159135, -0.11059990130964141, 0.8764647134632906, -0.4402254152970854, 0.20120539696487127, -0.10453110770576432, 0.7048524469661461, 0.4896040943246929, 0.7901375876878638, -0.22519829386063508, -0.005691574552709673, 1.0289646138777162, 0.18624445934329723, 0.5243131435328503, 0.3563886688504362, 0.2656286304492549, 0.6977662988435699, 0.3024201520424146, 0.22476746998899932, 0.8550167428197979, 0.6741988792219438, 0.8297487521183435, 1.3965191992226902, 1.4052090649959283, 0.6838018946420791, 0.9598190426050525, 1.0004025296696846, 0.9758689100337496, 0.20584355255571812, 0.42741407070342863, 0.18561705979079868, 0.4674086420762812, 0.36768804471337846, 0.48935491701051514, 0.6002549397007969, 0.4289802020889369, 0.08993142759760013, 0.22239681180104975, 0.60275990624917, -0.1393186027047904, 0.46602853567157676, 0.022560871582512902, 0.35424747859862754, 0.418490786585418, -0.09057730762925462, 0.2357279572465621, 0.4699130176456011, 0.27981914360145593, 0.11254977073511367, 0.4261743713874287, 0.5864758193302085, 0.5208140026414523, 0.06527262193945299, 0.8872465782209966, 0.16907514198419663, 0.0355552132331465, 0.6977893566417239, 0.808950843610392, 1.0116732393495647, 1.1423236976468618, 0.9894722709289874, 0.7015769170102071, 0.7002758920276513, 0.14658383375804893, -0.29509118201363815, 0.40265342864087, 0.41299596837426145, -0.22689775710122403, 0.7062669578687761, 0.02775317366273202, 0.3095284233057952, -0.20461610388512708, 0.12273232995251569, -0.4465175870811299, 0.7949119053978941, 0.05798047817537298, 0.4565261857851461, 0.6691758232665563, 0.375672276996143, 1.0108646292679893, 0.8216109318694691, 0.8146328308333551, 0.4193392025681895, 0.491524241133737, -0.2881728733435066, 0.7048928349987991, 0.817619693832159, 0.1814206832094926, 0.5767506954258828, 0.04809736376660974, -0.1692221812034327, 0.467435082011824, 1.1131905362516263, 1.135543469031568, 1.113923317715874, 1.4201501262088445, 1.1021723631742708, 0.8984625667377342, 0.9217536903226662, 0.8554095643956383, 1.0109415528767016, 0.5066424695499208, 0.9139196654508012, 0.6586445521746067, 0.6145903095582047, 0.4999434345299369, 1.208412981904068, 0.4814614922859005, 0.8762630074943198, 1.0610435983984052, 0.766033357607602, 1.1633723895973787, 0.9707439520859309, 1.4301810117245783, 0.8929513138045945, 1.1541788030302023, 0.848612592424496, 1.1294818533081508, 1.0196981740117697, 0.9911077090139455, 1.1996889705844702, 0.8780606933507923, 0.4657942520617814, 0.12217047915313861, 0.018349074883849636, -0.03135820022352047, -0.015886091698987116, -0.08499037630083994, 0.6050466249352134, 0.772448634262945, 0.9979286933659922, 0.6829846870456003, 0.799187172425903, 0.7685903125018041]
weights_trial = []
loss_best = 100000000000000
itC = 0
species = 0

# 6x6 neural network with a bias node for each layer. Rectified linear function will be used.


len_weights = 6*6*5
for i in range(0, len_weights):
    #weights.append(1)
    weights_trial.append(1)

len_nodes = 6*6
for i in range(0,len_nodes):
    nodes.append(0)



def sigmoid(x):
    if(x > 0):
        return x
    else:
        return 0


def ff(x_in, y_in, weights_in, nodes_in):
    nodes_in[0] = 1
    nodes_in[1] = x_in
    nodes_in[2] = y_in
    nodes_in[3] = 1
    nodes_in[4] = 1
    nodes_in[5] = 1

    for i in range(6,len_nodes):
        if(i % 6 == 0):
            nodes_in[i] = 1
        else:
            nodes_in[i] = 0
            for j in range(0, 6):
                # Add and weight all nodes in previous layer
                node_index = j + (i - i % 6) - 6
                weight_index = (i - 7) * 6 + j
                #print("node " + str(node_index) + " connected by " + str(weight_index) + " to " + str(i))
                nodes_in[i] += nodes_in[node_index] * weights_in[weight_index]
            nodes_in[i] = sigmoid(nodes[i])
    return nodes_in[-1]

#print(ff(1, 1, weights, nodes))

def extract_numbers_from_file(file_path):
    numbers = []
    try:
        with open(file_path, 'r') as file:
            for i, line in enumerate(file):
                if i >= 1000:  # Process only the first 1000 lines
                    break

                parts = line.split()  # Split the line into parts
                
                # Extract and store the first three numbers
                try:
                    first_three_numbers = [float(parts[j]) for j in range(3)]
                    numbers.append(first_three_numbers)
                except (IndexError, ValueError):
                    print(f"Line {i + 1} is malformed or doesn't contain enough numbers.")

    except FileNotFoundError:
        print(f"File not found: {file_path}")

    return numbers

# Example usage
file_path = 'train_data.txt'  # Replace with your file path
extracted_numbers = extract_numbers_from_file(file_path)
#print(extracted_numbers)


def loss(nodes_in, weights_in):
    sum = 0
    for i in range(0, 100):
        x = extracted_numbers[i][0]
        y = extracted_numbers[i][1]
        a = extracted_numbers[i][2]
        a_guess = ff(x, y, weights_in, nodes_in)
        loss = ((a - a_guess) ** 2) / 100
        sum += loss

    return sum

#print(loss(nodes, weights))

while True:
    #print(loss(nodes, weights))
    for i in range(0, len_weights):
        weights_trial[i] = weights[i]
    random_mag = 10 ** random.randint(-11, -1)
    for i in range(0, len_weights):
        if(random.uniform(0, 1) < 2 / len_weights):
            weights_trial[i] += random.uniform(-1,1) * random_mag
    
    #print(weights_trial)
    loss_trial = loss(nodes, weights_trial)
    if(loss_trial < loss_best):
        loss_best = loss_trial
        #print("\n\n\n\n" + str(weights_trial))
        print(str(loss_best))
        for i in range(0, len_weights):
            weights[i] = weights_trial[i]

        species += 1
    itC += 1





