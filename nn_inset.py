import random
import time

nodes = []

weights = [0.7369535240294205, 0.8611607931607478, 1.24450089026711, 0.5953139125689927, 0.6269832037837706, 0.10759926536974614, 0.41761909324863583, 0.6853642021524673, -0.1987232580873748, 0.12155282910551019, 0.039398994766229524, -0.47666152402919537, 0.3353130955112647, 0.10714807906158347, -0.16487580035259808, 0.2085297593264162, -0.20870634194388094, 0.5949604886533458, -0.03511996743954777, 0.327405994531259, 1.6418757161425936, 0.20501982438199198, -0.015892949165927844, -0.08539874184770323, -0.06808917977261604, 0.9561037889435193, 0.22659106171615973, 0.3766652712892095, -0.12040971048119431, -0.04673421809821644, 0.9553563463953559, 0.7163561937657097, 1.4488284359006098, 0.9457880913444975, 1.2813909746488776, 0.9652066674207277, 0.6527881957032061, -0.6409829975750932, 0.35046773393422875, 0.6140384269429324, 0.06830142883193477, 0.8411463695378308, 0.16065002713635101, 0.1373811069926466, 0.600832387740705, -0.09563483485531628, 0.5706705768536858, 0.18617098693522424, 0.9091367408724205, -0.48677587097096237, 0.2597312995988242, -0.12322890892503442, 1.013347353130735, 0.6767583987213259, 0.7484578586759518, -0.6037189404046188, 0.12667311786754096, 0.9897346041927104, 0.2624004612252854, 0.47577954983894466, 0.44350973480451683, 0.3264518142533728, 0.6688792662525525, 0.3769561406835797, 0.14232813434375272, 0.8897690811337218, 0.5817520206396853, 0.9824908566332977, 1.37706925530197, 1.3992364448771435, 0.7057674077126216, 0.8438558083395676, 1.068569407425183, 0.9018762556305875, 0.12570580623648653, 0.4963687858251509, 0.19152787276675406, 0.5900556150949225, 0.2208681317312616, 0.6684053689335221, 0.5285439175878577, 0.5701351534891743, 0.1594475530879375, 0.1900344058852781, 0.613983244366531, -0.18457225390150536, 0.4028414039101712, 0.04496457125698393, 0.3079957137361339, 0.4793784223283837, 0.013050752236251162, 0.08403885010356277, 0.31571890297966315, 0.20408223895868635, 0.10590034080514565, 0.4536053665648121, 0.23317359803411447, 0.6698434177295284, 0.14201746776938462, 1.1899796477338578, 0.14080915926868698, 0.03118424930067428, 0.6785507127002035, 0.6196380924569278, 1.0702052810778708, 1.2008840595707775, 1.092461873157976, 0.8648297342797624, 0.87215662460047, 0.1532187431733902, -0.3135030028394279, 0.3594544263446369, 0.35336543118499125, -0.531824101601228, 0.8712593220411516, 0.10677414270186114, 0.1925068480667592, 0.12600509265666723, 0.07244326216079333, -0.727506340559119, 0.8021127522861483, 0.07634306016530196, 0.6652918056359015, 0.5819804560520627, 0.3570552830454928, 1.2478429254656724, 0.7928165451886577, 0.9968974404493661, 0.4846232233049512, 0.4988657913166179, -0.11889361873019749, 0.7741127311659829, 0.5969521626184663, 0.40202544421963154, 0.7821075725336097, 0.08218585689921458, -0.17536156262856104, 0.7003533080884524, 1.0718427328729754, 0.9505486695716296, 1.1951695585566253, 1.4389148676091983, 1.2091935441870851, 0.8500184046897354, 0.8751594034060991, 0.8583267073032183, 1.0185524066440097, 0.4338146410570933, 0.7430454359097401, 0.5895936550483267, 0.7863351901448714, 0.4614590360759384, 1.2988800377978826, 0.3795704478854934, 1.0637264350245694, 0.9015585391961161, 0.7569377929333757, 1.089950178432298, 0.9870098112272978, 1.4921254681882914, 0.8852248620791803, 1.2692637723007298, 0.8304239931869293, 1.128888142434104, 1.0223508530546572, 1.0589853139126606, 0.9908807222755349, 0.7230870555555257, 0.5035343606074808, 0.1711334669521767, 0.2490616697796005, -0.032963500060402946, -0.017834864423417356, -0.08925086135243734, 0.7324335922726222, 0.7417727750934131, 1.0162949654671978, 0.7152463270791278, 0.7568798074144427, 0.727442566034879]
weights_trial = []
loss_best = 100000000000000
itC = 0
species = 0
data_examples = 1000

# 6x6 neural network with a bias node for each layer. Rectified linear function will be used.


len_weights = 6*6*5
for i in range(0, len_weights):
    #weights.append(1)
    weights_trial.append(1)

len_nodes = 6*6
for i in range(0,len_nodes):
    nodes.append(0)



def sigmoid(x):
    if(x > 0):
        return x
    else:
        return 0


def ff(x_in, y_in, weights_in, nodes_in):
    nodes_in[0] = 1
    nodes_in[1] = x_in
    nodes_in[2] = y_in
    nodes_in[3] = 1
    nodes_in[4] = 1
    nodes_in[5] = 1

    for i in range(6,len_nodes):
        if(i % 6 == 0):
            nodes_in[i] = 1
        else:
            nodes_in[i] = 0
            for j in range(0, 6):
                # Add and weight all nodes in previous layer
                node_index = j + (i - i % 6) - 6
                weight_index = (i - 7) * 6 + j
                #print("node " + str(node_index) + " connected by " + str(weight_index) + " to " + str(i))
                nodes_in[i] += nodes_in[node_index] * weights_in[weight_index]
            nodes_in[i] = sigmoid(nodes[i])
    return nodes_in[-1]

#print(ff(1, 1, weights, nodes))

def extract_numbers_from_file(file_path):
    numbers = []
    try:
        with open(file_path, 'r') as file:
            for i, line in enumerate(file):
                if i >= 1000:  # Process only the first 1000 lines
                    break

                parts = line.split()  # Split the line into parts
                
                # Extract and store the first three numbers
                try:
                    first_three_numbers = [float(parts[j]) for j in range(3)]
                    numbers.append(first_three_numbers)
                except (IndexError, ValueError):
                    print(f"Line {i + 1} is malformed or doesn't contain enough numbers.")

    except FileNotFoundError:
        print(f"File not found: {file_path}")

    return numbers

# Example usage
file_path = 'train_data.txt'  # Replace with your file path
extracted_numbers = extract_numbers_from_file(file_path)
#print(extracted_numbers)


def loss(nodes_in, weights_in):
    sum = 0
    for i in range(0, data_examples):
        x = extracted_numbers[i][0]
        y = extracted_numbers[i][1]
        a = extracted_numbers[i][2]
        a_guess = ff(x, y, weights_in, nodes_in)
        loss = ((a - a_guess) ** 2) / data_examples * 100
        sum += loss

    return sum

#print(loss(nodes, weights))

while True:
    #print(loss(nodes, weights))
    for i in range(0, len_weights):
        weights_trial[i] = weights[i]
    random_mag = 10 ** random.randint(-11, -1)
    for i in range(0, len_weights):
        if(random.uniform(0, 1) < 2 / len_weights):
            weights_trial[i] += random.uniform(-1,1) * random_mag
    
    #print(weights_trial)
    loss_trial = loss(nodes, weights_trial)
    if(loss_trial < loss_best):
        loss_best = loss_trial
        print("\n\n\n\n" + str(weights_trial))
        print("\n\n" + str(loss_best))
        for i in range(0, len_weights):
            weights[i] = weights_trial[i]

        species += 1
    itC += 1





