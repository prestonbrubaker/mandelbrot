import random
import time

nodes = []

weights = [-0.8289124233206183, -7.7291032880264465, 9.326908884514667, 0.9125985688216334, -0.7073230607239857, 0.732581343430259, 0.6818698269791766, 4.41191901735172, -1.7700138564787495, 0.6621669219424239, 1.3407124716413208, 1.576120561256524, 0.21423252692271844, -1.4926489231027447, 0.8607935705027684, 1.3150350228876002, 1.4531891925487987, 2.236317462307179, -0.6700090141969025, -9.412483106025737, 5.454070697262869, 0.9493678286867563, -0.49577311579287026, 1.2391399586840728, 0.7410421260737, -0.11513101923426995, -5.213862635781818, -0.755229118783192, 1.456625225346456, 1.7364769628110337, -0.18702729595222325, -0.6001840431262738, 1.6190661221961438, -0.7390142069651876, 0.6576402984172152, -0.93138098441886, 4.202297910833303, -3.9246176728778495, -5.958041556067485, 1.585474334708185, -3.353971795066436, -4.829328432933688, 4.152475249261872, -6.901919272118291, -5.912295518495186, 1.1363850205363226, -4.49796067326661, -4.740625142787244, 3.88087659258452, -4.478481469165234, -5.96041357976036, 0.09023182012497813, -2.959998968400942, -3.7719534337143488, 4.397438242551034, -4.697144304115812, -5.686779696563932, 2.025559488568337, -5.084562558705013, -5.092761264075268, -3.208770138550645, 3.6498537553309967, 4.480084978517498, -3.5625013212334826, 3.0160416444550755, 3.554035155537251, -0.6075298933683684, 1.4391916816616517, -1.4036961786564262, -1.469001008766975, 1.1675451024540626, -0.3810350363389845, -3.8452306776477947, -2.918151341049309, -5.721874594906593, -4.638008239957137, -3.897882615578699, -5.643522497705677, 6.4120820275623105, -5.539692574288833, -7.223990316048936, -4.449661593103339, -4.039001992867112, 6.681607280663298, 5.907590378790303, -6.243076058023048, -7.316027849635414, -3.983900624934619, -4.670186380158625, 7.842902695134137, 6.677812059268762, -5.655139249840662, -6.906383611708888, -4.41929770546215, -5.725525158417403, 7.550276664140073, 6.669882026439009, -5.705327055901124, -7.132974238564297, -4.589218888189422, -5.316510601301412, 7.993370139547332, 0.680673449142445, 0.02595356204721002, -0.18590849854829128, 1.5841588413071512, -0.11537290155349474, -1.1628800719268293, 8.399637856105707, 7.506096520110448, -7.558710313878097, -8.066117739346513, -8.25687887974353, -6.618588025674974, 10.158936821549354, 7.096935123941294, -7.684140707282115, -6.749401649084787, -9.339174713329577, -8.717197961177936, 8.022186802142018, 6.045976905357574, -7.01055380633856, -7.112057241855224, -6.59407572661946, -5.537517151437442, -3.4945904257438456, -6.8222642182071285, -5.0449609504771855, -6.506567987194111, -5.612303168671937, -3.431477492502937, 7.520767633063343, 7.418603566212237, -6.103172876887037, -7.256344479928679, -8.607899350164296, -6.1889787159128735, 1.0201604627654113, 0.24099691550437394, -1.112445573939541, -1.1557806935010124, 0.1717504734894881, 0.7053776524422185, 0.218687776683163, 0.4414278118113346, 0.8837225218149994, 0.336874168812372, -0.1435625345871113, 0.6123992468295907, -0.12256416434630012, 1.1332410257541843, 0.8212735911485367, -0.5832907356529773, 0.5281487117571376, -0.16038420141378953, -0.8090273520393132, 0.772470735600022, -0.540887540699215, 0.4570766083981659, -0.733039921905654, -1.0044672977544002, -1.6202151879238351, 0.37136200231423555, 0.8512180289530682, -0.05798839927283205, -0.595930783197624, -0.7803668783211452, -11.787473389811975, 11.861170834157724, 11.65000335295761, 8.050223520268244, -8.231646323453102, 8.621498111282909, 0.9101528734849518, 0.2771096453673012, -0.5652317424601375, -0.4110793641620014, 1.119577193111678, -0.7652837839586453]





#[0.7962194427262359, 0.8679136356598196, 1.345672324836952, 0.7107690480459323, 0.7189847086695862, 0.09622256967096318, 0.42791886820574265, 1.3031794297969592, -0.3689764222778109, -0.015442874224206926, -0.07920273673900985, -0.5280142372452709, 0.26634206883452877, 0.0032430609155442514, 0.9178467229570844, 0.27951436956422665, -0.1095795548247234, 0.7691664842621744, -0.05031832331869129, -0.0394776140478494, 1.7979141229402131, 0.15856123770819713, -0.00507558315255628, -0.16340426147575965, -0.13016428241044714, 1.1302766810555767, 0.34627340327790507, 0.19997919675180484, -0.14752148848777072, -0.07664769957986546, 1.1436526589066236, 1.0671646637881214, 2.085862676233181, 0.7958645853459808, 1.1764094455209346, 0.7694987035976301, 0.6216995479379452, -0.47481916806923546, 1.0965130062663526, 0.6085135489805698, 0.1294976219828699, 1.3261138308718043, 0.025436346945815484, 0.16156872118296942, 1.3422329659291012, -0.12733273521912192, 0.5491375978619222, 0.5671193258513063, 0.8457940283299448, -0.5229823728114003, 0.8089812643121039, -0.1594870765579088, 0.9752253633852064, 1.0917765985068948, 0.7164631173246411, -0.5991989957415279, 1.084055978859935, 1.2174296697698737, -0.6803578280586566, 0.7087640109568999, 0.7198969783629129, 0.45427395426052347, -0.25444642860661537, 0.7307941507419792, 0.5262033898050019, 0.819429556952168, 0.6301039521548017, 1.1770499763897888, 1.5499290650089628, 1.3647090236245787, 0.5586087823279018, 1.2082936422181374, 1.2953320405889115, 1.3500282047571817, 0.056912961871348006, -0.2638961363604728, 0.2185039117991345, 0.37555002835887186, 0.2851073126949273, 0.06540392283032595, 0.5829592845344722, 2.2360759283395097, 0.2449155642489743, 0.13803978705747413, 0.854719524215686, 0.13471279469880237, 0.5591455507283938, -1.1481894253026923, 0.3539200393378668, 0.4938995045494968, 0.21185921704676913, 0.169414792682728, 0.2914889868413274, -0.6947977228082256, 0.1906634263868198, 0.40041538107418967, 0.1188822883544649, 0.6417426120605517, 0.32147701341618506, 2.4826227875332108, 0.1272732883723633, -0.012603704495031794, 0.3663733928805913, 0.8473542656174747, 1.063344612273713, 0.8654906398679084, 0.8112849873414726, 1.0009288895070596, 1.0590307262275316, 0.25071605042332556, -0.7203910088062605, 0.36565539965631205, 0.5261612162869103, -0.9272305977134786, 1.0303954371541884, 0.10278691223570148, -0.008066049596298216, 0.10585113498922742, 0.16435953578179463, -1.2154315785410013, 0.692649654112871, -0.059815484738408115, 1.3253223903373705, 0.5273584584532695, 0.4285343798307263, 2.1324643575516293, 0.6205121810506705, 0.9588653412639484, 0.9159110256044164, 0.19671139332996326, -0.11127627040439694, 1.1631364458448505, 0.60523898481079, 0.3343835275787304, 1.2816630449419317, -0.13188165037572758, -0.0026406245936370382, 1.1278221961639927, 1.4786204587157044, 1.0094078912430473, 0.8072776374696843, 0.9407892660083346, 1.2091939679322443, 0.7939001728000052, 1.007002448538206, 1.0406663892138723, 1.1665661199242818, 0.41911491230277814, 0.7300162099388413, 0.5074402143773588, 0.785236412526618, 0.658677455126833, 1.2805641330254538, 0.281512927752482, 1.2162029938930778, 1.1768194480466572, 0.8338955386950271, 0.903834475129456, 0.9737794694045684, 1.7734539769575541, 0.840631480326589, 1.030452793529139, 0.6779911409757606, 1.1643529480607535, 1.1424731183150767, 0.7861559555608123, 1.1175347992357827, 0.5812378350183479, 0.4712619346187793, 0.2911856460307302, 0.45970440471282853, -0.04885593600332515, -0.02017399113397975, -0.11131071739237292, 0.7107231503166969, 1.0892071618205381, 0.9110701723766078, 0.6091903101522917, 0.7762570844429182, 0.6603167273420392]
#above set uses ReLU


weights_trial = []
loss_best = 100000000000000
itC = 0
species = 0
data_examples = 500

# 6x6 neural network with a bias node for each layer. Rectified linear function will be used.


len_weights = 6*6*5
for i in range(0, len_weights):
    #weights.append(0)
    weights_trial.append(0)

len_nodes = 6*6
for i in range(0,len_nodes):
    nodes.append(0)



def sigmoid(x):
    if(x > 20):
        x = 20
    if(x < -20):
        x = -20
    sigma = (1 / (1 + 2 ** x))
    return sigma
    #if(x > 0):
        #return x
    #else:
        #return 0


def ff(x_in, y_in, weights_in, nodes_in):
    nodes_in[0] = 1
    nodes_in[1] = x_in
    nodes_in[2] = y_in
    nodes_in[3] = 1
    nodes_in[4] = 1
    nodes_in[5] = 1

    for i in range(6,len_nodes):
        if(i % 6 == 0):
            nodes_in[i] = 1
        else:
            nodes_in[i] = 0
            for j in range(0, 6):
                # Add and weight all nodes in previous layer
                node_index = j + (i - i % 6) - 6
                weight_index = (i - 7) * 6 + j
                #print("node " + str(node_index) + " connected by " + str(weight_index) + " to " + str(i))
                nodes_in[i] += nodes_in[node_index] * weights_in[weight_index]
            nodes_in[i] = sigmoid(nodes[i])
    return nodes_in[-1]

#print(ff(1, 1, weights, nodes))

def extract_numbers_from_file(file_path):
    numbers = []
    try:
        with open(file_path, 'r') as file:
            for i, line in enumerate(file):
                if i >= data_examples:  # Process only the first 1000 lines
                    break

                parts = line.split()  # Split the line into parts
                
                # Extract and store the first three numbers
                try:
                    first_three_numbers = [float(parts[j]) for j in range(3)]
                    numbers.append(first_three_numbers)
                except (IndexError, ValueError):
                    print(f"Line {i + 1} is malformed or doesn't contain enough numbers.")

    except FileNotFoundError:
        print(f"File not found: {file_path}")

    return numbers

# Example usage
file_path = 'train_data.txt'  # Replace with your file path
extracted_numbers = extract_numbers_from_file(file_path)
#print(extracted_numbers)


def loss(nodes_in, weights_in):
    sum = 0
    for i in range(0, data_examples):
        x = extracted_numbers[i][0]
        y = extracted_numbers[i][1]
        a = extracted_numbers[i][2]
        a_guess = ff(x, y, weights_in, nodes_in)
        loss = ((a - a_guess) ** 2) / data_examples * 100
        sum += loss

    return sum

#print(loss(nodes, weights))

while True:
    #print(loss(nodes, weights))
    for i in range(0, len_weights):
        weights_trial[i] = weights[i]
    random_mag = 10 ** random.randint(-11, -1)
    for i in range(0, len_weights):
        if(random.uniform(0, 1) < 2 / len_weights):
            weights_trial[i] += random.uniform(-1,1) * random_mag
    
    #print(weights_trial)
    loss_trial = loss(nodes, weights_trial)
    if(loss_trial < loss_best):
        loss_best = loss_trial
        print("\n\n\n\n" + str(weights_trial))
        print("\n\n" + str(loss_best))
        for i in range(0, len_weights):
            weights[i] = weights_trial[i]

        species += 1
    itC += 1





